[Tests]
  [./test]
    type = 'Exodiff'
    input = 'mesh_generation_test.i'
    exodiff = 'out.e'
    requirement = 'MOOSE shall generate a structured mesh on a Cartesian domain.'
    design = 'mesh/GeneratedMesh.md'
    issues = '#760'
  [../]

  [./mesh_bias]
    type = 'Exodiff'
    input = 'mesh_bias.i'
    cli_args = '--mesh-only'
    exodiff = 'mesh_bias_in.e'
    recover = false
    requirement = 'MOOSE shall generate first-order, structured meshes with biasing in the x, y, and z directions.'
    design = 'mesh/GeneratedMesh.md'
    issues = '#6129'
  [../]

  [./mesh_bias_quadratic]
    type = 'Exodiff'
    input = 'mesh_bias.i'
    cli_args = 'Mesh/elem_type=HEX27 --mesh-only mesh_bias_quadratic_in.e'
    exodiff = 'mesh_bias_quadratic_in.e'
    recover = false
    requirement = 'MOOSE shall generate second-order, structured meshes with biasing in the x, y, and z directions.'
    design = 'mesh/GeneratedMesh.md'
    issues = '#6129'
  [../]

  [./annular]
    issues = '#8432'
    design = 'mesh/AnnularMesh.md'
    requirement = 'MOOSEs annular mesh generator'
    [./annular_except1]
      type = RunException
      input = annular_except1.i
      expect_err = 'rmax must be greater than rmin'
      detail = 'shall throw an error if the min radius is larger than the max radius.'
    [../]
    [./annular_except2]
      type = RunException
      input = annular_except2.i
      expect_err = 'dmax must be greater than dmin'
      detail = 'shall throw an error if the min angle is greater than or equal to the max angle.'
    [../]
    [./annular_except3]
      type = RunException
      input = annular_except3.i
      expect_err = 'dmax - dmin must be <= 360'
      detail = 'shall throw an error if the angle separation is larger than 360 degrees.'
    [../]
    [./annular_except4]
      type = RunException
      input = annular_except4.i
      expect_err = 'nt must be greater than \(dmax - dmin\) / 180 in order to avoid inverted elements'
      detail = 'shall throw an error if the number of elements in the angular direction is too small.'
    [../]

    [./annular_except5]
      type = RunException
      input = annular_except5.i
      expect_err = 'nt must be greater than \(dmax - dmin\) / 180 in order to avoid inverted elements'
      detail = 'shall throw an error if the number of elements in the angular direction is too small.'
    [../]
    [./annular_except6]
      type = RunException
      input = annular_except6.i
      expect_err = 'quad_subdomain_id must not equal tri_subdomain_id'
      detail = 'shall throw an error if the quadrilateral and triangular subdomain ids are the same.'
    [../]

    [./annulus]
      type = Exodiff
      input = annulus.i
      exodiff = 'annulus_out.e'
      detail = 'shall create an annulus using quad elements.'
    [../]

    [./annulus_sector]
      type = Exodiff
      input = annulus_sector.i
      exodiff = 'annulus_sector_out.e'
      detail = 'shall create an annulus sector using quad elements.'
    [../]
    [./disc]
      type = Exodiff
      input = disc.i
      exodiff = 'disc_out.e'
      detail = 'shall create a circular disk using quad elements.'
    [../]

    [./disc_sector]
      type = Exodiff
      input = disc_sector.i
      exodiff = 'disc_sector_out.e'
      detail = 'shall create a circular disk sector using quad elements.'
    [../]
  []

  [./annular_deprecated]
    issues = '#8432'
    design = 'mesh/AnnularMesh.md'
    deprecated = true
    [./annular_except1_deprecated]
      type = RunException
      input = annular_except1_deprecated.i
      expect_err = 'rmax must be greater than rmin'
    [../]
    [./annular_except2_deprecated]
      type = RunException
      input = annular_except2_deprecated.i
      expect_err = 'dmax must be greater than dmin'
    [../]
    [./annular_except3_deprecated]
      type = RunException
      input = annular_except3_deprecated.i
      expect_err = 'dmax - dmin must be <= 360'
    [../]
    [./annular_except5_deprecated]
      type = RunException
      input = annular_except5_deprecated.i
      expect_err = 'nt must be greater than \(dmax - dmin\) / 180 in order to avoid inverted elements'
    [../]
    [./annulus_sector_deprecated]
      type = Exodiff
      input = annulus_sector_deprecated.i
      exodiff = 'annulus_sector_deprecated_out.e'
      prereq = annular/annulus_sector
    [../]
    [./disc_sector_deprecated]
      type = Exodiff
      input = disc_sector_deprecated.i
      exodiff = 'disc_sector_deprecated_out.e'
      prereq = annular/disc_sector
    [../]
  []

  [./spiral_annular_mesh]
    type = 'Exodiff'
    input = 'spiral_mesh.i'
    cli_args = '--mesh-only'
    exodiff = 'spiral_mesh_in.e'
    recover = false
    requirement = 'MOOSE shall have an algorithm for meshing an annular region with triangular elements.'
    design = 'mesh/SpiralAnnularMesh.md'
    issues = '#12205'
  [../]

  [./ringleb_mesh]
    type = 'Exodiff'
    input = 'ringleb_mesh.i'
    cli_args = '--mesh-only'
    exodiff = 'ringleb_mesh_in.e'
    recover = false
    design = 'mesh/RinglebMesh.md'
    requirement = 'MOOSE shall have an algorithm for generating triangular and quadrilateral meshes for the Ringleb problem.'
    issues = '#12246'
  [../]
[]
